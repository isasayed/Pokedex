@using Pokedex.Models

@if (pokemon == null)
{
    <label>loading..</label>
}
else
{
    <img src="@pokemon.sprites.other.officialArtwork.front_default" />

    foreach (var item in pokemon.types)
    {
        <span class="badge ms-1">@item.type.name</span>
    }

    <Tabs>
        <Tab Title="Home" IsActive="true">
            <Content>
                <p class="mt-3">This is the placeholder content for the <b>Home</b> tab.</p>
            </Content>
        </Tab>
        <Tab Title="Profile">
            <Content>
                <p class="mt-3">This is the placeholder content for the <b>Profile</b> tab.</p>
            </Content>
        </Tab>
        <Tab Title="Contact">
            <Content>
                <p class="mt-3">This is the placeholder content for the <b>Contact</b> tab.</p>
            </Content>
        </Tab>
        <Tab Title="About">
            <Content>
                <p class="mt-3">This is the placeholder content for the <b>About</b> tab.</p>
            </Content>
        </Tab>
    </Tabs>
}   

@code {
    [Inject]
    public IHttpClientFactory _httpClientFactory { get; set; }

    [Parameter] 
    public string name { get; set; }

    private Pokemon? pokemon;

    protected override async Task OnParametersSetAsync()
    {
        pokemon = null;
        var client = _httpClientFactory.CreateClient("pokeApi");
        pokemon = await client.GetFromJsonAsync<Pokemon>($"pokemon/{name}");

        StateHasChanged();
        await Task.CompletedTask;
    }



}